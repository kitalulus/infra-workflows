name: Deploy workflow
on:
  workflow_call:
    inputs:
      # pass in environment through manual trigger, if not passed in, default to 'production'
      ENVIRONMENT:
        required: false
        type: string
        default: ''
      APP_NAME:
        required: false
        type: string
        default: ''
      RUNNER:
        required: false
        type: string
        default: ''
      CONFIGPATH:
        required: false
        type: string
        default: ''

env:
  ENVIRONMENT: '${{ inputs.ENVIRONMENT }}'

jobs:
  deploy_stage:
    name: K8S Deploy
    runs-on: ${{ inputs.RUNNER }}
    container: alpine/k8s:1.23.7
    steps:
      - uses: actions/checkout@v3
      - name: Get Short SHA
        id: short-sha
        run: echo "TAG_NAME=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRE_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - name: Apply Config
        run: |
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name eks-${{ inputs.ENVIRONMENT }}
          kubectl create configmap ${{ inputs.APP_NAME }}-cm --from-file ${{ inputs.CONFIGPATH }} -o yaml --dry-run | kubectl -n platform apply -f -
      - name: Get K8S Config
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.CI_MANIFEST }}
          ref: main
          token: ${{ secrets.KL_GITHUB_TOKEN }}
      - name: Deploy to k8s
        run: |
          apk add gettext
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name eks-${{ inputs.ENVIRONMENT }}
          envsubst < ${{ inputs.ENVIRONMENT }}/${{ inputs.ENVIRONMENT }}-${{ inputs.APP_NAME }}.yml | kubectl apply -f -
          kubectl rollout restart deployment/${{ inputs.APP_NAME }} -n ${{ secrets.CI_KUBENAMESPACE }}
          kubectl rollout status deployment/${{ inputs.APP_NAME }} -n ${{ secrets.CI_KUBENAMESPACE }}
      # - name: slack Notification
      #   if: failure()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_USERNAME: ${{ secrets.CI_SLACK_USERNAME }}
      #     SLACK_ICON: ${{ secrets.CI_SLACK_ICON }}
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_CHANNEL: ${{ secrets.CI_PRE_SLACK_CHANNEL }}
      #     SLACK_MESSAGE: "BUILD FAILED :alert-red:"
      #     SLACK_TITLE: 'Deploy ${{env.APP_NAME}} ' 
      #     SLACK_WEBHOOK: ${{ secrets.CI_PRE_SLACK_WEBHOOK }}
      #     MSG_MINIMAL: ${{ secrets.CI_SLACK_MSG_MINIMAL}}